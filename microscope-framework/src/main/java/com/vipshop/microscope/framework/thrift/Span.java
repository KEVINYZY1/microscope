/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vipshop.microscope.framework.thrift;

import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Map;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

@SuppressWarnings({ "unchecked", "rawtypes", "unused" })
public class Span implements org.apache.thrift.TBase<Span, Span._Fields>, java.io.Serializable, Cloneable {

	private static final long serialVersionUID = -423791219887102723L;

	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Span");

	private static final org.apache.thrift.protocol.TField APP_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("appName", org.apache.thrift.protocol.TType.STRING, (short) 1);
	private static final org.apache.thrift.protocol.TField APP_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("appIp", org.apache.thrift.protocol.TType.STRING, (short) 2);
	private static final org.apache.thrift.protocol.TField TRACE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("traceId", org.apache.thrift.protocol.TType.I64, (short) 3);
	private static final org.apache.thrift.protocol.TField SPAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("spanId", org.apache.thrift.protocol.TType.I64, (short) 4);
	private static final org.apache.thrift.protocol.TField PARENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("parentId", org.apache.thrift.protocol.TType.I64, (short) 5);
	private static final org.apache.thrift.protocol.TField SPAN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("spanName", org.apache.thrift.protocol.TType.STRING, (short) 6);
	private static final org.apache.thrift.protocol.TField SPAN_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("spanType", org.apache.thrift.protocol.TType.STRING, (short) 7);
	private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.I64, (short) 8);
	private static final org.apache.thrift.protocol.TField DURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("duration", org.apache.thrift.protocol.TType.I32, (short) 9);
	private static final org.apache.thrift.protocol.TField RESULT_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("resultCode", org.apache.thrift.protocol.TType.STRING, (short) 10);
	private static final org.apache.thrift.protocol.TField RESULT_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("resultSize", org.apache.thrift.protocol.TType.I32, (short) 11);
	private static final org.apache.thrift.protocol.TField SERVER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("serverName", org.apache.thrift.protocol.TType.STRING, (short) 12);
	private static final org.apache.thrift.protocol.TField SERVER_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("serverIp", org.apache.thrift.protocol.TType.STRING, (short) 13);
	private static final org.apache.thrift.protocol.TField DEBUG_FIELD_DESC = new org.apache.thrift.protocol.TField("debug", org.apache.thrift.protocol.TType.MAP, (short) 14);

	private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
	static {
		schemes.put(StandardScheme.class, new SpanStandardSchemeFactory());
		schemes.put(TupleScheme.class, new SpanTupleSchemeFactory());
	}

	public String appName; // required
	public String appIp; // required
	public long traceId; // required
	public long spanId; // required
	public long parentId; // required
	public String spanName; // required
	public String spanType; // required
	public long startTime; // required
	public int duration; // required
	public String resultCode; // required
	public int resultSize; // required
	public String serverName; // optional
	public String serverIp; // optional
	public Map<String, String> debug; // required

	/**
	 * The set of fields this struct contains, along with convenience methods
	 * for finding and manipulating them.
	 */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {
		APP_NAME((short) 1, "appName"), APP_IP((short) 2, "appIp"), TRACE_ID((short) 3, "traceId"), SPAN_ID((short) 4, "spanId"), PARENT_ID((short) 5, "parentId"), SPAN_NAME((short) 6, "spanName"), SPAN_TYPE(
				(short) 7, "spanType"), START_TIME((short) 8, "startTime"), DURATION((short) 9, "duration"), RESULT_CODE((short) 10, "resultCode"), RESULT_SIZE((short) 11, "resultSize"), SERVER_NAME(
				(short) 12, "serverName"), SERVER_IP((short) 13, "serverIp"), DEBUG((short) 14, "debug");

		private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

		static {
			for (_Fields field : EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not
		 * found.
		 */
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
			case 1: // APP_NAME
				return APP_NAME;
			case 2: // APP_IP
				return APP_IP;
			case 3: // TRACE_ID
				return TRACE_ID;
			case 4: // SPAN_ID
				return SPAN_ID;
			case 5: // PARENT_ID
				return PARENT_ID;
			case 6: // SPAN_NAME
				return SPAN_NAME;
			case 7: // SPAN_TYPE
				return SPAN_TYPE;
			case 8: // START_TIME
				return START_TIME;
			case 9: // DURATION
				return DURATION;
			case 10: // RESULT_CODE
				return RESULT_CODE;
			case 11: // RESULT_SIZE
				return RESULT_SIZE;
			case 12: // SERVER_NAME
				return SERVER_NAME;
			case 13: // SERVER_IP
				return SERVER_IP;
			case 14: // DEBUG
				return DEBUG;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception
		 * if it is not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not
		 * found.
		 */
		public static _Fields findByName(String name) {
			return byName.get(name);
		}

		private final short _thriftId;
		private final String _fieldName;

		_Fields(short thriftId, String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public String getFieldName() {
			return _fieldName;
		}
	}

	// isset id assignments
	private static final int __TRACEID_ISSET_ID = 0;
	private static final int __SPANID_ISSET_ID = 1;
	private static final int __PARENTID_ISSET_ID = 2;
	private static final int __STARTTIME_ISSET_ID = 3;
	private static final int __DURATION_ISSET_ID = 4;
	private static final int __RESULTSIZE_ISSET_ID = 5;
	private byte __isset_bitfield = 0;
	private _Fields optionals[] = { _Fields.SERVER_NAME, _Fields.SERVER_IP };
	public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	static {
		Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
		tmpMap.put(_Fields.APP_NAME, new org.apache.thrift.meta_data.FieldMetaData("appName", org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.FieldValueMetaData(
				org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.APP_IP, new org.apache.thrift.meta_data.FieldMetaData("appIp", org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.FieldValueMetaData(
				org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.TRACE_ID, new org.apache.thrift.meta_data.FieldMetaData("traceId", org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.FieldValueMetaData(
				org.apache.thrift.protocol.TType.I64)));
		tmpMap.put(_Fields.SPAN_ID, new org.apache.thrift.meta_data.FieldMetaData("spanId", org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.FieldValueMetaData(
				org.apache.thrift.protocol.TType.I64)));
		tmpMap.put(_Fields.PARENT_ID, new org.apache.thrift.meta_data.FieldMetaData("parentId", org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.FieldValueMetaData(
				org.apache.thrift.protocol.TType.I64)));
		tmpMap.put(_Fields.SPAN_NAME, new org.apache.thrift.meta_data.FieldMetaData("spanName", org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.FieldValueMetaData(
				org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.SPAN_TYPE, new org.apache.thrift.meta_data.FieldMetaData("spanType", org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.FieldValueMetaData(
				org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.FieldValueMetaData(
				org.apache.thrift.protocol.TType.I64)));
		tmpMap.put(_Fields.DURATION, new org.apache.thrift.meta_data.FieldMetaData("duration", org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.FieldValueMetaData(
				org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.RESULT_CODE, new org.apache.thrift.meta_data.FieldMetaData("resultCode", org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.RESULT_SIZE, new org.apache.thrift.meta_data.FieldMetaData("resultSize", org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.SERVER_NAME, new org.apache.thrift.meta_data.FieldMetaData("serverName", org.apache.thrift.TFieldRequirementType.OPTIONAL,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.SERVER_IP, new org.apache.thrift.meta_data.FieldMetaData("serverIp", org.apache.thrift.TFieldRequirementType.OPTIONAL, new org.apache.thrift.meta_data.FieldValueMetaData(
				org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.DEBUG, new org.apache.thrift.meta_data.FieldMetaData("debug", org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.MapMetaData(
				org.apache.thrift.protocol.TType.MAP, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), new org.apache.thrift.meta_data.FieldValueMetaData(
						org.apache.thrift.protocol.TType.STRING))));
		metaDataMap = Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Span.class, metaDataMap);
	}

	public Span() {
	}

	public Span(String appName, String appIp, long traceId, long spanId, long parentId, String spanName, String spanType, long startTime, int duration, String resultCode, int resultSize,
			Map<String, String> debug) {
		this();
		this.appName = appName;
		this.appIp = appIp;
		this.traceId = traceId;
		setTraceIdIsSet(true);
		this.spanId = spanId;
		setSpanIdIsSet(true);
		this.parentId = parentId;
		setParentIdIsSet(true);
		this.spanName = spanName;
		this.spanType = spanType;
		this.startTime = startTime;
		setStartTimeIsSet(true);
		this.duration = duration;
		setDurationIsSet(true);
		this.resultCode = resultCode;
		this.resultSize = resultSize;
		setResultSizeIsSet(true);
		this.debug = debug;
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public Span(Span other) {
		__isset_bitfield = other.__isset_bitfield;
		if (other.isSetAppName()) {
			this.appName = other.appName;
		}
		if (other.isSetAppIp()) {
			this.appIp = other.appIp;
		}
		this.traceId = other.traceId;
		this.spanId = other.spanId;
		this.parentId = other.parentId;
		if (other.isSetSpanName()) {
			this.spanName = other.spanName;
		}
		if (other.isSetSpanType()) {
			this.spanType = other.spanType;
		}
		this.startTime = other.startTime;
		this.duration = other.duration;
		if (other.isSetResultCode()) {
			this.resultCode = other.resultCode;
		}
		this.resultSize = other.resultSize;
		if (other.isSetServerName()) {
			this.serverName = other.serverName;
		}
		if (other.isSetServerIp()) {
			this.serverIp = other.serverIp;
		}
		if (other.isSetDebug()) {
			Map<String, String> __this__debug = new HashMap<String, String>();
			for (Map.Entry<String, String> other_element : other.debug.entrySet()) {

				String other_element_key = other_element.getKey();
				String other_element_value = other_element.getValue();

				String __this__debug_copy_key = other_element_key;

				String __this__debug_copy_value = other_element_value;

				__this__debug.put(__this__debug_copy_key, __this__debug_copy_value);
			}
			this.debug = __this__debug;
		}
	}

	public Span deepCopy() {
		return new Span(this);
	}

	@Override
	public void clear() {
		this.appName = null;
		this.appIp = null;
		setTraceIdIsSet(false);
		this.traceId = 0;
		setSpanIdIsSet(false);
		this.spanId = 0;
		setParentIdIsSet(false);
		this.parentId = 0;
		this.spanName = null;
		this.spanType = null;
		setStartTimeIsSet(false);
		this.startTime = 0;
		setDurationIsSet(false);
		this.duration = 0;
		this.resultCode = null;
		setResultSizeIsSet(false);
		this.resultSize = 0;
		this.serverName = null;
		this.serverIp = null;
		this.debug = null;
	}

	public String getAppName() {
		return this.appName;
	}

	public Span setAppName(String appName) {
		this.appName = appName;
		return this;
	}

	public void unsetAppName() {
		this.appName = null;
	}

	/**
	 * Returns true if field appName is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetAppName() {
		return this.appName != null;
	}

	public void setAppNameIsSet(boolean value) {
		if (!value) {
			this.appName = null;
		}
	}

	public String getAppIp() {
		return this.appIp;
	}

	public Span setAppIp(String appIp) {
		this.appIp = appIp;
		return this;
	}

	public void unsetAppIp() {
		this.appIp = null;
	}

	/**
	 * Returns true if field appIp is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetAppIp() {
		return this.appIp != null;
	}

	public void setAppIpIsSet(boolean value) {
		if (!value) {
			this.appIp = null;
		}
	}

	public long getTraceId() {
		return this.traceId;
	}

	public Span setTraceId(long traceId) {
		this.traceId = traceId;
		setTraceIdIsSet(true);
		return this;
	}

	public void unsetTraceId() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRACEID_ISSET_ID);
	}

	/**
	 * Returns true if field traceId is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetTraceId() {
		return EncodingUtils.testBit(__isset_bitfield, __TRACEID_ISSET_ID);
	}

	public void setTraceIdIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRACEID_ISSET_ID, value);
	}

	public long getSpanId() {
		return this.spanId;
	}

	public Span setSpanId(long spanId) {
		this.spanId = spanId;
		setSpanIdIsSet(true);
		return this;
	}

	public void unsetSpanId() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SPANID_ISSET_ID);
	}

	/**
	 * Returns true if field spanId is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetSpanId() {
		return EncodingUtils.testBit(__isset_bitfield, __SPANID_ISSET_ID);
	}

	public void setSpanIdIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SPANID_ISSET_ID, value);
	}

	public long getParentId() {
		return this.parentId;
	}

	public Span setParentId(long parentId) {
		this.parentId = parentId;
		setParentIdIsSet(true);
		return this;
	}

	public void unsetParentId() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARENTID_ISSET_ID);
	}

	/**
	 * Returns true if field parentId is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetParentId() {
		return EncodingUtils.testBit(__isset_bitfield, __PARENTID_ISSET_ID);
	}

	public void setParentIdIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARENTID_ISSET_ID, value);
	}

	public String getSpanName() {
		return this.spanName;
	}

	public Span setSpanName(String spanName) {
		this.spanName = spanName;
		return this;
	}

	public void unsetSpanName() {
		this.spanName = null;
	}

	/**
	 * Returns true if field spanName is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetSpanName() {
		return this.spanName != null;
	}

	public void setSpanNameIsSet(boolean value) {
		if (!value) {
			this.spanName = null;
		}
	}

	public String getSpanType() {
		return this.spanType;
	}

	public Span setSpanType(String spanType) {
		this.spanType = spanType;
		return this;
	}

	public void unsetSpanType() {
		this.spanType = null;
	}

	/**
	 * Returns true if field spanType is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetSpanType() {
		return this.spanType != null;
	}

	public void setSpanTypeIsSet(boolean value) {
		if (!value) {
			this.spanType = null;
		}
	}

	public long getStartTime() {
		return this.startTime;
	}

	public Span setStartTime(long startTime) {
		this.startTime = startTime;
		setStartTimeIsSet(true);
		return this;
	}

	public void unsetStartTime() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTTIME_ISSET_ID);
	}

	/**
	 * Returns true if field startTime is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetStartTime() {
		return EncodingUtils.testBit(__isset_bitfield, __STARTTIME_ISSET_ID);
	}

	public void setStartTimeIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTTIME_ISSET_ID, value);
	}

	public int getDuration() {
		return this.duration;
	}

	public Span setDuration(int duration) {
		this.duration = duration;
		setDurationIsSet(true);
		return this;
	}

	public void unsetDuration() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DURATION_ISSET_ID);
	}

	/**
	 * Returns true if field duration is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetDuration() {
		return EncodingUtils.testBit(__isset_bitfield, __DURATION_ISSET_ID);
	}

	public void setDurationIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DURATION_ISSET_ID, value);
	}

	public String getResultCode() {
		return this.resultCode;
	}

	public Span setResultCode(String resultCode) {
		this.resultCode = resultCode;
		return this;
	}

	public void unsetResultCode() {
		this.resultCode = null;
	}

	/**
	 * Returns true if field resultCode is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetResultCode() {
		return this.resultCode != null;
	}

	public void setResultCodeIsSet(boolean value) {
		if (!value) {
			this.resultCode = null;
		}
	}

	public int getResultSize() {
		return this.resultSize;
	}

	public Span setResultSize(int resultSize) {
		this.resultSize = resultSize;
		setResultSizeIsSet(true);
		return this;
	}

	public void unsetResultSize() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RESULTSIZE_ISSET_ID);
	}

	/**
	 * Returns true if field resultSize is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetResultSize() {
		return EncodingUtils.testBit(__isset_bitfield, __RESULTSIZE_ISSET_ID);
	}

	public void setResultSizeIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RESULTSIZE_ISSET_ID, value);
	}

	public String getServerName() {
		return this.serverName;
	}

	public Span setServerName(String serverName) {
		this.serverName = serverName;
		return this;
	}

	public void unsetServerName() {
		this.serverName = null;
	}

	/**
	 * Returns true if field serverName is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetServerName() {
		return this.serverName != null;
	}

	public void setServerNameIsSet(boolean value) {
		if (!value) {
			this.serverName = null;
		}
	}

	public String getServerIp() {
		return this.serverIp;
	}

	public Span setServerIp(String serverIp) {
		this.serverIp = serverIp;
		return this;
	}

	public void unsetServerIp() {
		this.serverIp = null;
	}

	/**
	 * Returns true if field serverIp is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetServerIp() {
		return this.serverIp != null;
	}

	public void setServerIpIsSet(boolean value) {
		if (!value) {
			this.serverIp = null;
		}
	}

	public int getDebugSize() {
		return (this.debug == null) ? 0 : this.debug.size();
	}

	public void putToDebug(String key, String val) {
		if (this.debug == null) {
			this.debug = new HashMap<String, String>();
		}
		this.debug.put(key, val);
	}

	public Map<String, String> getDebug() {
		return this.debug;
	}

	public Span setDebug(Map<String, String> debug) {
		this.debug = debug;
		return this;
	}

	public void unsetDebug() {
		this.debug = null;
	}

	/**
	 * Returns true if field debug is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetDebug() {
		return this.debug != null;
	}

	public void setDebugIsSet(boolean value) {
		if (!value) {
			this.debug = null;
		}
	}

	public void setFieldValue(_Fields field, Object value) {
		switch (field) {
		case APP_NAME:
			if (value == null) {
				unsetAppName();
			} else {
				setAppName((String) value);
			}
			break;

		case APP_IP:
			if (value == null) {
				unsetAppIp();
			} else {
				setAppIp((String) value);
			}
			break;

		case TRACE_ID:
			if (value == null) {
				unsetTraceId();
			} else {
				setTraceId((Long) value);
			}
			break;

		case SPAN_ID:
			if (value == null) {
				unsetSpanId();
			} else {
				setSpanId((Long) value);
			}
			break;

		case PARENT_ID:
			if (value == null) {
				unsetParentId();
			} else {
				setParentId((Long) value);
			}
			break;

		case SPAN_NAME:
			if (value == null) {
				unsetSpanName();
			} else {
				setSpanName((String) value);
			}
			break;

		case SPAN_TYPE:
			if (value == null) {
				unsetSpanType();
			} else {
				setSpanType((String) value);
			}
			break;

		case START_TIME:
			if (value == null) {
				unsetStartTime();
			} else {
				setStartTime((Long) value);
			}
			break;

		case DURATION:
			if (value == null) {
				unsetDuration();
			} else {
				setDuration((Integer) value);
			}
			break;

		case RESULT_CODE:
			if (value == null) {
				unsetResultCode();
			} else {
				setResultCode((String) value);
			}
			break;

		case RESULT_SIZE:
			if (value == null) {
				unsetResultSize();
			} else {
				setResultSize((Integer) value);
			}
			break;

		case SERVER_NAME:
			if (value == null) {
				unsetServerName();
			} else {
				setServerName((String) value);
			}
			break;

		case SERVER_IP:
			if (value == null) {
				unsetServerIp();
			} else {
				setServerIp((String) value);
			}
			break;

		case DEBUG:
			if (value == null) {
				unsetDebug();
			} else {
				setDebug((Map<String, String>) value);
			}
			break;

		}
	}

	public Object getFieldValue(_Fields field) {
		switch (field) {
		case APP_NAME:
			return getAppName();

		case APP_IP:
			return getAppIp();

		case TRACE_ID:
			return Long.valueOf(getTraceId());

		case SPAN_ID:
			return Long.valueOf(getSpanId());

		case PARENT_ID:
			return Long.valueOf(getParentId());

		case SPAN_NAME:
			return getSpanName();

		case SPAN_TYPE:
			return getSpanType();

		case START_TIME:
			return Long.valueOf(getStartTime());

		case DURATION:
			return Integer.valueOf(getDuration());

		case RESULT_CODE:
			return getResultCode();

		case RESULT_SIZE:
			return Integer.valueOf(getResultSize());

		case SERVER_NAME:
			return getServerName();

		case SERVER_IP:
			return getServerIp();

		case DEBUG:
			return getDebug();

		}
		throw new IllegalStateException();
	}

	/**
	 * Returns true if field corresponding to fieldID is set (has been assigned
	 * a value) and false otherwise
	 */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new IllegalArgumentException();
		}

		switch (field) {
		case APP_NAME:
			return isSetAppName();
		case APP_IP:
			return isSetAppIp();
		case TRACE_ID:
			return isSetTraceId();
		case SPAN_ID:
			return isSetSpanId();
		case PARENT_ID:
			return isSetParentId();
		case SPAN_NAME:
			return isSetSpanName();
		case SPAN_TYPE:
			return isSetSpanType();
		case START_TIME:
			return isSetStartTime();
		case DURATION:
			return isSetDuration();
		case RESULT_CODE:
			return isSetResultCode();
		case RESULT_SIZE:
			return isSetResultSize();
		case SERVER_NAME:
			return isSetServerName();
		case SERVER_IP:
			return isSetServerIp();
		case DEBUG:
			return isSetDebug();
		}
		throw new IllegalStateException();
	}

	@Override
	public boolean equals(Object that) {
		if (that == null)
			return false;
		if (that instanceof Span)
			return this.equals((Span) that);
		return false;
	}

	public boolean equals(Span that) {
		if (that == null)
			return false;

		boolean this_present_appName = true && this.isSetAppName();
		boolean that_present_appName = true && that.isSetAppName();
		if (this_present_appName || that_present_appName) {
			if (!(this_present_appName && that_present_appName))
				return false;
			if (!this.appName.equals(that.appName))
				return false;
		}

		boolean this_present_appIp = true && this.isSetAppIp();
		boolean that_present_appIp = true && that.isSetAppIp();
		if (this_present_appIp || that_present_appIp) {
			if (!(this_present_appIp && that_present_appIp))
				return false;
			if (!this.appIp.equals(that.appIp))
				return false;
		}

		boolean this_present_traceId = true;
		boolean that_present_traceId = true;
		if (this_present_traceId || that_present_traceId) {
			if (!(this_present_traceId && that_present_traceId))
				return false;
			if (this.traceId != that.traceId)
				return false;
		}

		boolean this_present_spanId = true;
		boolean that_present_spanId = true;
		if (this_present_spanId || that_present_spanId) {
			if (!(this_present_spanId && that_present_spanId))
				return false;
			if (this.spanId != that.spanId)
				return false;
		}

		boolean this_present_parentId = true;
		boolean that_present_parentId = true;
		if (this_present_parentId || that_present_parentId) {
			if (!(this_present_parentId && that_present_parentId))
				return false;
			if (this.parentId != that.parentId)
				return false;
		}

		boolean this_present_spanName = true && this.isSetSpanName();
		boolean that_present_spanName = true && that.isSetSpanName();
		if (this_present_spanName || that_present_spanName) {
			if (!(this_present_spanName && that_present_spanName))
				return false;
			if (!this.spanName.equals(that.spanName))
				return false;
		}

		boolean this_present_spanType = true && this.isSetSpanType();
		boolean that_present_spanType = true && that.isSetSpanType();
		if (this_present_spanType || that_present_spanType) {
			if (!(this_present_spanType && that_present_spanType))
				return false;
			if (!this.spanType.equals(that.spanType))
				return false;
		}

		boolean this_present_startTime = true;
		boolean that_present_startTime = true;
		if (this_present_startTime || that_present_startTime) {
			if (!(this_present_startTime && that_present_startTime))
				return false;
			if (this.startTime != that.startTime)
				return false;
		}

		boolean this_present_duration = true;
		boolean that_present_duration = true;
		if (this_present_duration || that_present_duration) {
			if (!(this_present_duration && that_present_duration))
				return false;
			if (this.duration != that.duration)
				return false;
		}

		boolean this_present_resultCode = true && this.isSetResultCode();
		boolean that_present_resultCode = true && that.isSetResultCode();
		if (this_present_resultCode || that_present_resultCode) {
			if (!(this_present_resultCode && that_present_resultCode))
				return false;
			if (!this.resultCode.equals(that.resultCode))
				return false;
		}

		boolean this_present_resultSize = true;
		boolean that_present_resultSize = true;
		if (this_present_resultSize || that_present_resultSize) {
			if (!(this_present_resultSize && that_present_resultSize))
				return false;
			if (this.resultSize != that.resultSize)
				return false;
		}

		boolean this_present_serverName = true && this.isSetServerName();
		boolean that_present_serverName = true && that.isSetServerName();
		if (this_present_serverName || that_present_serverName) {
			if (!(this_present_serverName && that_present_serverName))
				return false;
			if (!this.serverName.equals(that.serverName))
				return false;
		}

		boolean this_present_serverIp = true && this.isSetServerIp();
		boolean that_present_serverIp = true && that.isSetServerIp();
		if (this_present_serverIp || that_present_serverIp) {
			if (!(this_present_serverIp && that_present_serverIp))
				return false;
			if (!this.serverIp.equals(that.serverIp))
				return false;
		}

		boolean this_present_debug = true && this.isSetDebug();
		boolean that_present_debug = true && that.isSetDebug();
		if (this_present_debug || that_present_debug) {
			if (!(this_present_debug && that_present_debug))
				return false;
			if (!this.debug.equals(that.debug))
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		return 0;
	}

	public int compareTo(Span other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;
		Span typedOther = (Span) other;

		lastComparison = Boolean.valueOf(isSetAppName()).compareTo(typedOther.isSetAppName());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetAppName()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appName, typedOther.appName);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetAppIp()).compareTo(typedOther.isSetAppIp());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetAppIp()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appIp, typedOther.appIp);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetTraceId()).compareTo(typedOther.isSetTraceId());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetTraceId()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.traceId, typedOther.traceId);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetSpanId()).compareTo(typedOther.isSetSpanId());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetSpanId()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spanId, typedOther.spanId);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetParentId()).compareTo(typedOther.isSetParentId());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetParentId()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentId, typedOther.parentId);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetSpanName()).compareTo(typedOther.isSetSpanName());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetSpanName()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spanName, typedOther.spanName);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetSpanType()).compareTo(typedOther.isSetSpanType());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetSpanType()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spanType, typedOther.spanType);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(typedOther.isSetStartTime());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetStartTime()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, typedOther.startTime);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetDuration()).compareTo(typedOther.isSetDuration());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetDuration()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.duration, typedOther.duration);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetResultCode()).compareTo(typedOther.isSetResultCode());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetResultCode()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resultCode, typedOther.resultCode);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetResultSize()).compareTo(typedOther.isSetResultSize());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetResultSize()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resultSize, typedOther.resultSize);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetServerName()).compareTo(typedOther.isSetServerName());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetServerName()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverName, typedOther.serverName);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetServerIp()).compareTo(typedOther.isSetServerIp());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetServerIp()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverIp, typedOther.serverIp);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetDebug()).compareTo(typedOther.isSetDebug());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetDebug()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.debug, typedOther.debug);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
		schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
		schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder("Span(");
		boolean first = true;

		sb.append("appName:");
		if (this.appName == null) {
			sb.append("null");
		} else {
			sb.append(this.appName);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("appIp:");
		if (this.appIp == null) {
			sb.append("null");
		} else {
			sb.append(this.appIp);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("traceId:");
		sb.append(this.traceId);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("spanId:");
		sb.append(this.spanId);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("parentId:");
		sb.append(this.parentId);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("spanName:");
		if (this.spanName == null) {
			sb.append("null");
		} else {
			sb.append(this.spanName);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("spanType:");
		if (this.spanType == null) {
			sb.append("null");
		} else {
			sb.append(this.spanType);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("startTime:");
		sb.append(this.startTime);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("duration:");
		sb.append(this.duration);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("resultCode:");
		if (this.resultCode == null) {
			sb.append("null");
		} else {
			sb.append(this.resultCode);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("resultSize:");
		sb.append(this.resultSize);
		first = false;
		if (isSetServerName()) {
			if (!first)
				sb.append(", ");
			sb.append("serverName:");
			if (this.serverName == null) {
				sb.append("null");
			} else {
				sb.append(this.serverName);
			}
			first = false;
		}
		if (isSetServerIp()) {
			if (!first)
				sb.append(", ");
			sb.append("serverIp:");
			if (this.serverIp == null) {
				sb.append("null");
			} else {
				sb.append(this.serverIp);
			}
			first = false;
		}
		if (!first)
			sb.append(", ");
		sb.append("debug:");
		if (this.debug == null) {
			sb.append("null");
		} else {
			sb.append(this.debug);
		}
		first = false;
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		// check for sub-struct validity
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
		try {
			// it doesn't seem like you should have to do this, but java
			// serialization is wacky, and doesn't call the default constructor.
			__isset_bitfield = 0;
			read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class SpanStandardSchemeFactory implements SchemeFactory {
		public SpanStandardScheme getScheme() {
			return new SpanStandardScheme();
		}
	}

	private static class SpanStandardScheme extends StandardScheme<Span> {

		public void read(org.apache.thrift.protocol.TProtocol iprot, Span struct) throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
				case 1: // APP_NAME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.appName = iprot.readString();
						struct.setAppNameIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 2: // APP_IP
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.appIp = iprot.readString();
						struct.setAppIpIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 3: // TRACE_ID
					if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
						struct.traceId = iprot.readI64();
						struct.setTraceIdIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 4: // SPAN_ID
					if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
						struct.spanId = iprot.readI64();
						struct.setSpanIdIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 5: // PARENT_ID
					if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
						struct.parentId = iprot.readI64();
						struct.setParentIdIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 6: // SPAN_NAME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.spanName = iprot.readString();
						struct.setSpanNameIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 7: // SPAN_TYPE
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.spanType = iprot.readString();
						struct.setSpanTypeIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 8: // START_TIME
					if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
						struct.startTime = iprot.readI64();
						struct.setStartTimeIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 9: // DURATION
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.duration = iprot.readI32();
						struct.setDurationIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 10: // RESULT_CODE
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.resultCode = iprot.readString();
						struct.setResultCodeIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 11: // RESULT_SIZE
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.resultSize = iprot.readI32();
						struct.setResultSizeIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 12: // SERVER_NAME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.serverName = iprot.readString();
						struct.setServerNameIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 13: // SERVER_IP
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.serverIp = iprot.readString();
						struct.setServerIpIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 14: // DEBUG
					if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
						{
							org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
							struct.debug = new HashMap<String, String>(2 * _map0.size);
							for (int _i1 = 0; _i1 < _map0.size; ++_i1) {
								String _key2; // required
								String _val3; // required
								_key2 = iprot.readString();
								_val3 = iprot.readString();
								struct.debug.put(_key2, _val3);
							}
							iprot.readMapEnd();
						}
						struct.setDebugIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be
			// checked in the validate method
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot, Span struct) throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			if (struct.appName != null) {
				oprot.writeFieldBegin(APP_NAME_FIELD_DESC);
				oprot.writeString(struct.appName);
				oprot.writeFieldEnd();
			}
			if (struct.appIp != null) {
				oprot.writeFieldBegin(APP_IP_FIELD_DESC);
				oprot.writeString(struct.appIp);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(TRACE_ID_FIELD_DESC);
			oprot.writeI64(struct.traceId);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(SPAN_ID_FIELD_DESC);
			oprot.writeI64(struct.spanId);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(PARENT_ID_FIELD_DESC);
			oprot.writeI64(struct.parentId);
			oprot.writeFieldEnd();
			if (struct.spanName != null) {
				oprot.writeFieldBegin(SPAN_NAME_FIELD_DESC);
				oprot.writeString(struct.spanName);
				oprot.writeFieldEnd();
			}
			if (struct.spanType != null) {
				oprot.writeFieldBegin(SPAN_TYPE_FIELD_DESC);
				oprot.writeString(struct.spanType);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(START_TIME_FIELD_DESC);
			oprot.writeI64(struct.startTime);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(DURATION_FIELD_DESC);
			oprot.writeI32(struct.duration);
			oprot.writeFieldEnd();
			if (struct.resultCode != null) {
				oprot.writeFieldBegin(RESULT_CODE_FIELD_DESC);
				oprot.writeString(struct.resultCode);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(RESULT_SIZE_FIELD_DESC);
			oprot.writeI32(struct.resultSize);
			oprot.writeFieldEnd();
			if (struct.serverName != null) {
				if (struct.isSetServerName()) {
					oprot.writeFieldBegin(SERVER_NAME_FIELD_DESC);
					oprot.writeString(struct.serverName);
					oprot.writeFieldEnd();
				}
			}
			if (struct.serverIp != null) {
				if (struct.isSetServerIp()) {
					oprot.writeFieldBegin(SERVER_IP_FIELD_DESC);
					oprot.writeString(struct.serverIp);
					oprot.writeFieldEnd();
				}
			}
			if (struct.debug != null) {
				oprot.writeFieldBegin(DEBUG_FIELD_DESC);
				{
					oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.debug.size()));
					for (Map.Entry<String, String> _iter4 : struct.debug.entrySet()) {
						oprot.writeString(_iter4.getKey());
						oprot.writeString(_iter4.getValue());
					}
					oprot.writeMapEnd();
				}
				oprot.writeFieldEnd();
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class SpanTupleSchemeFactory implements SchemeFactory {
		public SpanTupleScheme getScheme() {
			return new SpanTupleScheme();
		}
	}

	private static class SpanTupleScheme extends TupleScheme<Span> {

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot, Span struct) throws org.apache.thrift.TException {
			TTupleProtocol oprot = (TTupleProtocol) prot;
			BitSet optionals = new BitSet();
			if (struct.isSetAppName()) {
				optionals.set(0);
			}
			if (struct.isSetAppIp()) {
				optionals.set(1);
			}
			if (struct.isSetTraceId()) {
				optionals.set(2);
			}
			if (struct.isSetSpanId()) {
				optionals.set(3);
			}
			if (struct.isSetParentId()) {
				optionals.set(4);
			}
			if (struct.isSetSpanName()) {
				optionals.set(5);
			}
			if (struct.isSetSpanType()) {
				optionals.set(6);
			}
			if (struct.isSetStartTime()) {
				optionals.set(7);
			}
			if (struct.isSetDuration()) {
				optionals.set(8);
			}
			if (struct.isSetResultCode()) {
				optionals.set(9);
			}
			if (struct.isSetResultSize()) {
				optionals.set(10);
			}
			if (struct.isSetServerName()) {
				optionals.set(11);
			}
			if (struct.isSetServerIp()) {
				optionals.set(12);
			}
			if (struct.isSetDebug()) {
				optionals.set(13);
			}
			oprot.writeBitSet(optionals, 14);
			if (struct.isSetAppName()) {
				oprot.writeString(struct.appName);
			}
			if (struct.isSetAppIp()) {
				oprot.writeString(struct.appIp);
			}
			if (struct.isSetTraceId()) {
				oprot.writeI64(struct.traceId);
			}
			if (struct.isSetSpanId()) {
				oprot.writeI64(struct.spanId);
			}
			if (struct.isSetParentId()) {
				oprot.writeI64(struct.parentId);
			}
			if (struct.isSetSpanName()) {
				oprot.writeString(struct.spanName);
			}
			if (struct.isSetSpanType()) {
				oprot.writeString(struct.spanType);
			}
			if (struct.isSetStartTime()) {
				oprot.writeI64(struct.startTime);
			}
			if (struct.isSetDuration()) {
				oprot.writeI32(struct.duration);
			}
			if (struct.isSetResultCode()) {
				oprot.writeString(struct.resultCode);
			}
			if (struct.isSetResultSize()) {
				oprot.writeI32(struct.resultSize);
			}
			if (struct.isSetServerName()) {
				oprot.writeString(struct.serverName);
			}
			if (struct.isSetServerIp()) {
				oprot.writeString(struct.serverIp);
			}
			if (struct.isSetDebug()) {
				{
					oprot.writeI32(struct.debug.size());
					for (Map.Entry<String, String> _iter5 : struct.debug.entrySet()) {
						oprot.writeString(_iter5.getKey());
						oprot.writeString(_iter5.getValue());
					}
				}
			}
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot, Span struct) throws org.apache.thrift.TException {
			TTupleProtocol iprot = (TTupleProtocol) prot;
			BitSet incoming = iprot.readBitSet(14);
			if (incoming.get(0)) {
				struct.appName = iprot.readString();
				struct.setAppNameIsSet(true);
			}
			if (incoming.get(1)) {
				struct.appIp = iprot.readString();
				struct.setAppIpIsSet(true);
			}
			if (incoming.get(2)) {
				struct.traceId = iprot.readI64();
				struct.setTraceIdIsSet(true);
			}
			if (incoming.get(3)) {
				struct.spanId = iprot.readI64();
				struct.setSpanIdIsSet(true);
			}
			if (incoming.get(4)) {
				struct.parentId = iprot.readI64();
				struct.setParentIdIsSet(true);
			}
			if (incoming.get(5)) {
				struct.spanName = iprot.readString();
				struct.setSpanNameIsSet(true);
			}
			if (incoming.get(6)) {
				struct.spanType = iprot.readString();
				struct.setSpanTypeIsSet(true);
			}
			if (incoming.get(7)) {
				struct.startTime = iprot.readI64();
				struct.setStartTimeIsSet(true);
			}
			if (incoming.get(8)) {
				struct.duration = iprot.readI32();
				struct.setDurationIsSet(true);
			}
			if (incoming.get(9)) {
				struct.resultCode = iprot.readString();
				struct.setResultCodeIsSet(true);
			}
			if (incoming.get(10)) {
				struct.resultSize = iprot.readI32();
				struct.setResultSizeIsSet(true);
			}
			if (incoming.get(11)) {
				struct.serverName = iprot.readString();
				struct.setServerNameIsSet(true);
			}
			if (incoming.get(12)) {
				struct.serverIp = iprot.readString();
				struct.setServerIpIsSet(true);
			}
			if (incoming.get(13)) {
				{
					org.apache.thrift.protocol.TMap _map6 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
					struct.debug = new HashMap<String, String>(2 * _map6.size);
					for (int _i7 = 0; _i7 < _map6.size; ++_i7) {
						String _key8; // required
						String _val9; // required
						_key8 = iprot.readString();
						_val9 = iprot.readString();
						struct.debug.put(_key8, _val9);
					}
				}
				struct.setDebugIsSet(true);
			}
		}
	}

}
