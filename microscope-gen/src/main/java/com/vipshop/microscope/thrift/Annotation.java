/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vipshop.microscope.thrift;

import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Map;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

public class Annotation implements org.apache.thrift.TBase<Annotation, Annotation._Fields>, java.io.Serializable, Cloneable {

	private static final long serialVersionUID = -8145945502269666508L;

	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Annotation");

	private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I64, (short) 1);
	private static final org.apache.thrift.protocol.TField END_POINT_FIELD_DESC = new org.apache.thrift.protocol.TField("endPoint", org.apache.thrift.protocol.TType.STRUCT, (short) 2);
	private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short) 3);

	@SuppressWarnings("rawtypes")
	private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
	static {
		schemes.put(StandardScheme.class, new AnnotationStandardSchemeFactory());
		schemes.put(TupleScheme.class, new AnnotationTupleSchemeFactory());
	}

	public long timestamp; // required
	public EndPoint endPoint; // required
	/**
	 * 
	 * @see AnnotationType
	 */
	public AnnotationType type; // required

	/**
	 * The set of fields this struct contains, along with convenience methods
	 * for finding and manipulating them.
	 */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {
		TIMESTAMP((short) 1, "timestamp"), END_POINT((short) 2, "endPoint"),
		/**
		 * 
		 * @see AnnotationType
		 */
		TYPE((short) 3, "type");

		private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

		static {
			for (_Fields field : EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not
		 * found.
		 */
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
			case 1: // TIMESTAMP
				return TIMESTAMP;
			case 2: // END_POINT
				return END_POINT;
			case 3: // TYPE
				return TYPE;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception
		 * if it is not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not
		 * found.
		 */
		public static _Fields findByName(String name) {
			return byName.get(name);
		}

		private final short _thriftId;
		private final String _fieldName;

		_Fields(short thriftId, String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public String getFieldName() {
			return _fieldName;
		}
	}

	// isset id assignments
	private static final int __TIMESTAMP_ISSET_ID = 0;
	private byte __isset_bitfield = 0;
	public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	static {
		Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
		tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.FieldValueMetaData(
				org.apache.thrift.protocol.TType.I64)));
		tmpMap.put(_Fields.END_POINT, new org.apache.thrift.meta_data.FieldMetaData("endPoint", org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.StructMetaData(
				org.apache.thrift.protocol.TType.STRUCT, EndPoint.class)));
		tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.EnumMetaData(
				org.apache.thrift.protocol.TType.ENUM, AnnotationType.class)));
		metaDataMap = Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Annotation.class, metaDataMap);
	}

	public Annotation() {
	}

	public Annotation(long timestamp, EndPoint endPoint, AnnotationType type) {
		this();
		this.timestamp = timestamp;
		setTimestampIsSet(true);
		this.endPoint = endPoint;
		this.type = type;
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public Annotation(Annotation other) {
		__isset_bitfield = other.__isset_bitfield;
		this.timestamp = other.timestamp;
		if (other.isSetEndPoint()) {
			this.endPoint = new EndPoint(other.endPoint);
		}
		if (other.isSetType()) {
			this.type = other.type;
		}
	}

	public Annotation deepCopy() {
		return new Annotation(this);
	}

	@Override
	public void clear() {
		setTimestampIsSet(false);
		this.timestamp = 0;
		this.endPoint = null;
		this.type = null;
	}

	public long getTimestamp() {
		return this.timestamp;
	}

	public Annotation setTimestamp(long timestamp) {
		this.timestamp = timestamp;
		setTimestampIsSet(true);
		return this;
	}

	public void unsetTimestamp() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
	}

	/**
	 * Returns true if field timestamp is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetTimestamp() {
		return EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
	}

	public void setTimestampIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
	}

	public EndPoint getEndPoint() {
		return this.endPoint;
	}

	public Annotation setEndPoint(EndPoint endPoint) {
		this.endPoint = endPoint;
		return this;
	}

	public void unsetEndPoint() {
		this.endPoint = null;
	}

	/**
	 * Returns true if field endPoint is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetEndPoint() {
		return this.endPoint != null;
	}

	public void setEndPointIsSet(boolean value) {
		if (!value) {
			this.endPoint = null;
		}
	}

	/**
	 * 
	 * @see AnnotationType
	 */
	public AnnotationType getType() {
		return this.type;
	}

	/**
	 * 
	 * @see AnnotationType
	 */
	public Annotation setType(AnnotationType type) {
		this.type = type;
		return this;
	}

	public void unsetType() {
		this.type = null;
	}

	/**
	 * Returns true if field type is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetType() {
		return this.type != null;
	}

	public void setTypeIsSet(boolean value) {
		if (!value) {
			this.type = null;
		}
	}

	public void setFieldValue(_Fields field, Object value) {
		switch (field) {
		case TIMESTAMP:
			if (value == null) {
				unsetTimestamp();
			} else {
				setTimestamp((Long) value);
			}
			break;

		case END_POINT:
			if (value == null) {
				unsetEndPoint();
			} else {
				setEndPoint((EndPoint) value);
			}
			break;

		case TYPE:
			if (value == null) {
				unsetType();
			} else {
				setType((AnnotationType) value);
			}
			break;

		}
	}

	public Object getFieldValue(_Fields field) {
		switch (field) {
		case TIMESTAMP:
			return Long.valueOf(getTimestamp());

		case END_POINT:
			return getEndPoint();

		case TYPE:
			return getType();

		}
		throw new IllegalStateException();
	}

	/**
	 * Returns true if field corresponding to fieldID is set (has been assigned
	 * a value) and false otherwise
	 */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new IllegalArgumentException();
		}

		switch (field) {
		case TIMESTAMP:
			return isSetTimestamp();
		case END_POINT:
			return isSetEndPoint();
		case TYPE:
			return isSetType();
		}
		throw new IllegalStateException();
	}

	@Override
	public boolean equals(Object that) {
		if (that == null)
			return false;
		if (that instanceof Annotation)
			return this.equals((Annotation) that);
		return false;
	}

	public boolean equals(Annotation that) {
		if (that == null)
			return false;

		boolean this_present_timestamp = true;
		boolean that_present_timestamp = true;
		if (this_present_timestamp || that_present_timestamp) {
			if (!(this_present_timestamp && that_present_timestamp))
				return false;
			if (this.timestamp != that.timestamp)
				return false;
		}

		boolean this_present_endPoint = true && this.isSetEndPoint();
		boolean that_present_endPoint = true && that.isSetEndPoint();
		if (this_present_endPoint || that_present_endPoint) {
			if (!(this_present_endPoint && that_present_endPoint))
				return false;
			if (!this.endPoint.equals(that.endPoint))
				return false;
		}

		boolean this_present_type = true && this.isSetType();
		boolean that_present_type = true && that.isSetType();
		if (this_present_type || that_present_type) {
			if (!(this_present_type && that_present_type))
				return false;
			if (!this.type.equals(that.type))
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		return 0;
	}

	public int compareTo(Annotation other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;
		Annotation typedOther = (Annotation) other;

		lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(typedOther.isSetTimestamp());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetTimestamp()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, typedOther.timestamp);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetEndPoint()).compareTo(typedOther.isSetEndPoint());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetEndPoint()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endPoint, typedOther.endPoint);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetType()).compareTo(typedOther.isSetType());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetType()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, typedOther.type);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	@SuppressWarnings("unchecked")
	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
		schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
	}

	@SuppressWarnings("unchecked")
	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
		schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder("Annotation(");
		boolean first = true;

		sb.append("timestamp:");
		sb.append(this.timestamp);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("endPoint:");
		if (this.endPoint == null) {
			sb.append("null");
		} else {
			sb.append(this.endPoint);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("type:");
		if (this.type == null) {
			sb.append("null");
		} else {
			sb.append(this.type);
		}
		first = false;
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		// check for sub-struct validity
		if (endPoint != null) {
			endPoint.validate();
		}
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
		try {
			// it doesn't seem like you should have to do this, but java
			// serialization is wacky, and doesn't call the default constructor.
			__isset_bitfield = 0;
			read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class AnnotationStandardSchemeFactory implements SchemeFactory {
		@SuppressWarnings("unchecked")
		public AnnotationStandardScheme getScheme() {
			return new AnnotationStandardScheme();
		}
	}

	private static class AnnotationStandardScheme extends StandardScheme<Annotation> {

		public void read(org.apache.thrift.protocol.TProtocol iprot, Annotation struct) throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
				case 1: // TIMESTAMP
					if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
						struct.timestamp = iprot.readI64();
						struct.setTimestampIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 2: // END_POINT
					if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
						struct.endPoint = new EndPoint();
						struct.endPoint.read(iprot);
						struct.setEndPointIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 3: // TYPE
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.type = AnnotationType.findByValue(iprot.readI32());
						struct.setTypeIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be
			// checked in the validate method
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot, Annotation struct) throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
			oprot.writeI64(struct.timestamp);
			oprot.writeFieldEnd();
			if (struct.endPoint != null) {
				oprot.writeFieldBegin(END_POINT_FIELD_DESC);
				struct.endPoint.write(oprot);
				oprot.writeFieldEnd();
			}
			if (struct.type != null) {
				oprot.writeFieldBegin(TYPE_FIELD_DESC);
				oprot.writeI32(struct.type.getValue());
				oprot.writeFieldEnd();
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class AnnotationTupleSchemeFactory implements SchemeFactory {
		@SuppressWarnings("unchecked")
		public AnnotationTupleScheme getScheme() {
			return new AnnotationTupleScheme();
		}
	}

	private static class AnnotationTupleScheme extends TupleScheme<Annotation> {

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot, Annotation struct) throws org.apache.thrift.TException {
			TTupleProtocol oprot = (TTupleProtocol) prot;
			BitSet optionals = new BitSet();
			if (struct.isSetTimestamp()) {
				optionals.set(0);
			}
			if (struct.isSetEndPoint()) {
				optionals.set(1);
			}
			if (struct.isSetType()) {
				optionals.set(2);
			}
			oprot.writeBitSet(optionals, 3);
			if (struct.isSetTimestamp()) {
				oprot.writeI64(struct.timestamp);
			}
			if (struct.isSetEndPoint()) {
				struct.endPoint.write(oprot);
			}
			if (struct.isSetType()) {
				oprot.writeI32(struct.type.getValue());
			}
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot, Annotation struct) throws org.apache.thrift.TException {
			TTupleProtocol iprot = (TTupleProtocol) prot;
			BitSet incoming = iprot.readBitSet(3);
			if (incoming.get(0)) {
				struct.timestamp = iprot.readI64();
				struct.setTimestampIsSet(true);
			}
			if (incoming.get(1)) {
				struct.endPoint = new EndPoint();
				struct.endPoint.read(iprot);
				struct.setEndPointIsSet(true);
			}
			if (incoming.get(2)) {
				struct.type = AnnotationType.findByValue(iprot.readI32());
				struct.setTypeIsSet(true);
			}
		}
	}

}
