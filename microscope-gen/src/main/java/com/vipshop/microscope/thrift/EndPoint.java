/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vipshop.microscope.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class EndPoint implements org.apache.thrift.TBase<EndPoint, EndPoint._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("EndPoint");

  private static final org.apache.thrift.protocol.TField CPU_FIELD_DESC = new org.apache.thrift.protocol.TField("cpu", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField LOAD_FIELD_DESC = new org.apache.thrift.protocol.TField("load", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField MEMORY_FIELD_DESC = new org.apache.thrift.protocol.TField("memory", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField JVM_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("jvmInfo", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField IPV4_FIELD_DESC = new org.apache.thrift.protocol.TField("ipv4", org.apache.thrift.protocol.TType.I32, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new EndPointStandardSchemeFactory());
    schemes.put(TupleScheme.class, new EndPointTupleSchemeFactory());
  }

  public int cpu; // required
  public int load; // required
  public long memory; // required
  public String jvmInfo; // required
  public int ipv4; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CPU((short)1, "cpu"),
    LOAD((short)2, "load"),
    MEMORY((short)3, "memory"),
    JVM_INFO((short)4, "jvmInfo"),
    IPV4((short)5, "ipv4");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CPU
          return CPU;
        case 2: // LOAD
          return LOAD;
        case 3: // MEMORY
          return MEMORY;
        case 4: // JVM_INFO
          return JVM_INFO;
        case 5: // IPV4
          return IPV4;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CPU_ISSET_ID = 0;
  private static final int __LOAD_ISSET_ID = 1;
  private static final int __MEMORY_ISSET_ID = 2;
  private static final int __IPV4_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CPU, new org.apache.thrift.meta_data.FieldMetaData("cpu", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LOAD, new org.apache.thrift.meta_data.FieldMetaData("load", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MEMORY, new org.apache.thrift.meta_data.FieldMetaData("memory", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.JVM_INFO, new org.apache.thrift.meta_data.FieldMetaData("jvmInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IPV4, new org.apache.thrift.meta_data.FieldMetaData("ipv4", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(EndPoint.class, metaDataMap);
  }

  public EndPoint() {
  }

  public EndPoint(
    int cpu,
    int load,
    long memory,
    String jvmInfo,
    int ipv4)
  {
    this();
    this.cpu = cpu;
    setCpuIsSet(true);
    this.load = load;
    setLoadIsSet(true);
    this.memory = memory;
    setMemoryIsSet(true);
    this.jvmInfo = jvmInfo;
    this.ipv4 = ipv4;
    setIpv4IsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public EndPoint(EndPoint other) {
    __isset_bitfield = other.__isset_bitfield;
    this.cpu = other.cpu;
    this.load = other.load;
    this.memory = other.memory;
    if (other.isSetJvmInfo()) {
      this.jvmInfo = other.jvmInfo;
    }
    this.ipv4 = other.ipv4;
  }

  public EndPoint deepCopy() {
    return new EndPoint(this);
  }

  @Override
  public void clear() {
    setCpuIsSet(false);
    this.cpu = 0;
    setLoadIsSet(false);
    this.load = 0;
    setMemoryIsSet(false);
    this.memory = 0;
    this.jvmInfo = null;
    setIpv4IsSet(false);
    this.ipv4 = 0;
  }

  public int getCpu() {
    return this.cpu;
  }

  public EndPoint setCpu(int cpu) {
    this.cpu = cpu;
    setCpuIsSet(true);
    return this;
  }

  public void unsetCpu() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CPU_ISSET_ID);
  }

  /** Returns true if field cpu is set (has been assigned a value) and false otherwise */
  public boolean isSetCpu() {
    return EncodingUtils.testBit(__isset_bitfield, __CPU_ISSET_ID);
  }

  public void setCpuIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CPU_ISSET_ID, value);
  }

  public int getLoad() {
    return this.load;
  }

  public EndPoint setLoad(int load) {
    this.load = load;
    setLoadIsSet(true);
    return this;
  }

  public void unsetLoad() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOAD_ISSET_ID);
  }

  /** Returns true if field load is set (has been assigned a value) and false otherwise */
  public boolean isSetLoad() {
    return EncodingUtils.testBit(__isset_bitfield, __LOAD_ISSET_ID);
  }

  public void setLoadIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOAD_ISSET_ID, value);
  }

  public long getMemory() {
    return this.memory;
  }

  public EndPoint setMemory(long memory) {
    this.memory = memory;
    setMemoryIsSet(true);
    return this;
  }

  public void unsetMemory() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEMORY_ISSET_ID);
  }

  /** Returns true if field memory is set (has been assigned a value) and false otherwise */
  public boolean isSetMemory() {
    return EncodingUtils.testBit(__isset_bitfield, __MEMORY_ISSET_ID);
  }

  public void setMemoryIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEMORY_ISSET_ID, value);
  }

  public String getJvmInfo() {
    return this.jvmInfo;
  }

  public EndPoint setJvmInfo(String jvmInfo) {
    this.jvmInfo = jvmInfo;
    return this;
  }

  public void unsetJvmInfo() {
    this.jvmInfo = null;
  }

  /** Returns true if field jvmInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetJvmInfo() {
    return this.jvmInfo != null;
  }

  public void setJvmInfoIsSet(boolean value) {
    if (!value) {
      this.jvmInfo = null;
    }
  }

  public int getIpv4() {
    return this.ipv4;
  }

  public EndPoint setIpv4(int ipv4) {
    this.ipv4 = ipv4;
    setIpv4IsSet(true);
    return this;
  }

  public void unsetIpv4() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IPV4_ISSET_ID);
  }

  /** Returns true if field ipv4 is set (has been assigned a value) and false otherwise */
  public boolean isSetIpv4() {
    return EncodingUtils.testBit(__isset_bitfield, __IPV4_ISSET_ID);
  }

  public void setIpv4IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IPV4_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CPU:
      if (value == null) {
        unsetCpu();
      } else {
        setCpu((Integer)value);
      }
      break;

    case LOAD:
      if (value == null) {
        unsetLoad();
      } else {
        setLoad((Integer)value);
      }
      break;

    case MEMORY:
      if (value == null) {
        unsetMemory();
      } else {
        setMemory((Long)value);
      }
      break;

    case JVM_INFO:
      if (value == null) {
        unsetJvmInfo();
      } else {
        setJvmInfo((String)value);
      }
      break;

    case IPV4:
      if (value == null) {
        unsetIpv4();
      } else {
        setIpv4((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CPU:
      return Integer.valueOf(getCpu());

    case LOAD:
      return Integer.valueOf(getLoad());

    case MEMORY:
      return Long.valueOf(getMemory());

    case JVM_INFO:
      return getJvmInfo();

    case IPV4:
      return Integer.valueOf(getIpv4());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CPU:
      return isSetCpu();
    case LOAD:
      return isSetLoad();
    case MEMORY:
      return isSetMemory();
    case JVM_INFO:
      return isSetJvmInfo();
    case IPV4:
      return isSetIpv4();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof EndPoint)
      return this.equals((EndPoint)that);
    return false;
  }

  public boolean equals(EndPoint that) {
    if (that == null)
      return false;

    boolean this_present_cpu = true;
    boolean that_present_cpu = true;
    if (this_present_cpu || that_present_cpu) {
      if (!(this_present_cpu && that_present_cpu))
        return false;
      if (this.cpu != that.cpu)
        return false;
    }

    boolean this_present_load = true;
    boolean that_present_load = true;
    if (this_present_load || that_present_load) {
      if (!(this_present_load && that_present_load))
        return false;
      if (this.load != that.load)
        return false;
    }

    boolean this_present_memory = true;
    boolean that_present_memory = true;
    if (this_present_memory || that_present_memory) {
      if (!(this_present_memory && that_present_memory))
        return false;
      if (this.memory != that.memory)
        return false;
    }

    boolean this_present_jvmInfo = true && this.isSetJvmInfo();
    boolean that_present_jvmInfo = true && that.isSetJvmInfo();
    if (this_present_jvmInfo || that_present_jvmInfo) {
      if (!(this_present_jvmInfo && that_present_jvmInfo))
        return false;
      if (!this.jvmInfo.equals(that.jvmInfo))
        return false;
    }

    boolean this_present_ipv4 = true;
    boolean that_present_ipv4 = true;
    if (this_present_ipv4 || that_present_ipv4) {
      if (!(this_present_ipv4 && that_present_ipv4))
        return false;
      if (this.ipv4 != that.ipv4)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(EndPoint other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    EndPoint typedOther = (EndPoint)other;

    lastComparison = Boolean.valueOf(isSetCpu()).compareTo(typedOther.isSetCpu());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpu()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpu, typedOther.cpu);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoad()).compareTo(typedOther.isSetLoad());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoad()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.load, typedOther.load);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMemory()).compareTo(typedOther.isSetMemory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMemory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memory, typedOther.memory);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJvmInfo()).compareTo(typedOther.isSetJvmInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJvmInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jvmInfo, typedOther.jvmInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIpv4()).compareTo(typedOther.isSetIpv4());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIpv4()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ipv4, typedOther.ipv4);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("EndPoint(");
    boolean first = true;

    sb.append("cpu:");
    sb.append(this.cpu);
    first = false;
    if (!first) sb.append(", ");
    sb.append("load:");
    sb.append(this.load);
    first = false;
    if (!first) sb.append(", ");
    sb.append("memory:");
    sb.append(this.memory);
    first = false;
    if (!first) sb.append(", ");
    sb.append("jvmInfo:");
    if (this.jvmInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.jvmInfo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ipv4:");
    sb.append(this.ipv4);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class EndPointStandardSchemeFactory implements SchemeFactory {
    public EndPointStandardScheme getScheme() {
      return new EndPointStandardScheme();
    }
  }

  private static class EndPointStandardScheme extends StandardScheme<EndPoint> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, EndPoint struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CPU
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cpu = iprot.readI32();
              struct.setCpuIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LOAD
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.load = iprot.readI32();
              struct.setLoadIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MEMORY
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.memory = iprot.readI64();
              struct.setMemoryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // JVM_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.jvmInfo = iprot.readString();
              struct.setJvmInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IPV4
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ipv4 = iprot.readI32();
              struct.setIpv4IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, EndPoint struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(CPU_FIELD_DESC);
      oprot.writeI32(struct.cpu);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOAD_FIELD_DESC);
      oprot.writeI32(struct.load);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MEMORY_FIELD_DESC);
      oprot.writeI64(struct.memory);
      oprot.writeFieldEnd();
      if (struct.jvmInfo != null) {
        oprot.writeFieldBegin(JVM_INFO_FIELD_DESC);
        oprot.writeString(struct.jvmInfo);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IPV4_FIELD_DESC);
      oprot.writeI32(struct.ipv4);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class EndPointTupleSchemeFactory implements SchemeFactory {
    public EndPointTupleScheme getScheme() {
      return new EndPointTupleScheme();
    }
  }

  private static class EndPointTupleScheme extends TupleScheme<EndPoint> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, EndPoint struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCpu()) {
        optionals.set(0);
      }
      if (struct.isSetLoad()) {
        optionals.set(1);
      }
      if (struct.isSetMemory()) {
        optionals.set(2);
      }
      if (struct.isSetJvmInfo()) {
        optionals.set(3);
      }
      if (struct.isSetIpv4()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetCpu()) {
        oprot.writeI32(struct.cpu);
      }
      if (struct.isSetLoad()) {
        oprot.writeI32(struct.load);
      }
      if (struct.isSetMemory()) {
        oprot.writeI64(struct.memory);
      }
      if (struct.isSetJvmInfo()) {
        oprot.writeString(struct.jvmInfo);
      }
      if (struct.isSetIpv4()) {
        oprot.writeI32(struct.ipv4);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, EndPoint struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.cpu = iprot.readI32();
        struct.setCpuIsSet(true);
      }
      if (incoming.get(1)) {
        struct.load = iprot.readI32();
        struct.setLoadIsSet(true);
      }
      if (incoming.get(2)) {
        struct.memory = iprot.readI64();
        struct.setMemoryIsSet(true);
      }
      if (incoming.get(3)) {
        struct.jvmInfo = iprot.readString();
        struct.setJvmInfoIsSet(true);
      }
      if (incoming.get(4)) {
        struct.ipv4 = iprot.readI32();
        struct.setIpv4IsSet(true);
      }
    }
  }

}

